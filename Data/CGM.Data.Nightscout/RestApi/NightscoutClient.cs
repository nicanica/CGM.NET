//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.2.0.0 (NJsonSchema v9.2.4.0) (http://NSwag.org)
// </auto-generated>
//----------------------

//using MongoDB.Bson.Serialization.Attributes;

namespace CGM.Data.Nightscout.RestApi
{
#pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.2.0.0")]
    public partial class NightscoutClient
    {
        private string _baseUrl = "";

        public NightscoutClient(string baseUrl)
        {
            BaseUrl = baseUrl;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>All Entries matching query</summary>
        /// <param name="spec">entry id, such as `55cf81bc436037528ec75fa5` or a type filter such
        /// as `sgv`, `mbg`, etc.</param>
        /// <param name="find">The query used to find entries, support nested query syntax, for
        /// example `find[dateString][$gte]=2015-08-27`.  All find parameters
        /// are interpreted as strings.</param>
        /// <param name="count">Number of entries to return.</param>
        /// <returns>An array of entries</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Entry>> EntriesAllAsync(string spec, string find, double? count)
        {
            return EntriesAllAsync(spec, find, count, System.Threading.CancellationToken.None);
        }

        /// <summary>All Entries matching query</summary>
        /// <param name="spec">entry id, such as `55cf81bc436037528ec75fa5` or a type filter such
        /// as `sgv`, `mbg`, etc.</param>
        /// <param name="find">The query used to find entries, support nested query syntax, for
        /// example `find[dateString][$gte]=2015-08-27`.  All find parameters
        /// are interpreted as strings.</param>
        /// <param name="count">Number of entries to return.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>An array of entries</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Entry>> EntriesAllAsync(string spec, string find, double? count, System.Threading.CancellationToken cancellationToken)
        {
            if (spec == null)
                throw new System.ArgumentNullException("spec");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/entries/{spec}?");
            urlBuilder_.Replace("{spec}", System.Uri.EscapeDataString(System.Convert.ToString(spec, System.Globalization.CultureInfo.InvariantCulture)));
            if (find != null) urlBuilder_.Append("find=").Append(System.Uri.EscapeDataString(System.Convert.ToString(find, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (count != null) urlBuilder_.Append("count=").Append(System.Uri.EscapeDataString(System.Convert.ToString(count.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Entry>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Entry>>(responseData_);
                                return result_;
                            }
                            catch (System.Exception exception)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Entry>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Entry>>(responseData_);

                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }

                            throw new SwaggerException<System.Collections.ObjectModel.ObservableCollection<Entry>>("Entries", status_, responseData_, headers_, result_, null);
                        }

                        return default(System.Collections.ObjectModel.ObservableCollection<Entry>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>All Entries matching query</summary>
        /// <param name="storage">Prefix to use in constructing a prefix-based regex, default is `entries`.</param>
        /// <param name="field">Name of the field to use Regex against in query object, default is `dateString`.</param>
        /// <param name="type">The type field to search against, default is sgv.</param>
        /// <param name="prefix">Prefix to use in constructing a prefix-based regex.</param>
        /// <param name="regex">Tail part of regexp to use in expanding/construccting a query object.
        /// Regexp also has bash-style brace and glob expansion applied to it,
        /// creating ways to search for modal times of day, perhaps using
        /// something like this syntax: `T{15..17}:.*`, this would search for
        /// all records from 3pm to 5pm.</param>
        /// <param name="find">The query used to find entries, support nested query syntax, for
        /// example `find[dateString][$gte]=2015-08-27`.  All find parameters
        /// are interpreted as strings.</param>
        /// <param name="count">Number of entries to return.</param>
        /// <returns>An array of entries</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Entry>> SliceAsync(string storage, string field, string type, string prefix, string regex, string find, double? count)
        {
            return SliceAsync(storage, field, type, prefix, regex, find, count, System.Threading.CancellationToken.None);
        }

        /// <summary>All Entries matching query</summary>
        /// <param name="storage">Prefix to use in constructing a prefix-based regex, default is `entries`.</param>
        /// <param name="field">Name of the field to use Regex against in query object, default is `dateString`.</param>
        /// <param name="type">The type field to search against, default is sgv.</param>
        /// <param name="prefix">Prefix to use in constructing a prefix-based regex.</param>
        /// <param name="regex">Tail part of regexp to use in expanding/construccting a query object.
        /// Regexp also has bash-style brace and glob expansion applied to it,
        /// creating ways to search for modal times of day, perhaps using
        /// something like this syntax: `T{15..17}:.*`, this would search for
        /// all records from 3pm to 5pm.</param>
        /// <param name="find">The query used to find entries, support nested query syntax, for
        /// example `find[dateString][$gte]=2015-08-27`.  All find parameters
        /// are interpreted as strings.</param>
        /// <param name="count">Number of entries to return.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>An array of entries</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Entry>> SliceAsync(string storage, string field, string type, string prefix, string regex, string find, double? count, System.Threading.CancellationToken cancellationToken)
        {
            if (storage == null)
                throw new System.ArgumentNullException("storage");

            if (field == null)
                throw new System.ArgumentNullException("field");

            if (type == null)
                throw new System.ArgumentNullException("type");

            if (prefix == null)
                throw new System.ArgumentNullException("prefix");

            if (regex == null)
                throw new System.ArgumentNullException("regex");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/slice/{storage}/{field}/{type}/{prefix}/{regex}?");
            urlBuilder_.Replace("{storage}", System.Uri.EscapeDataString(System.Convert.ToString(storage, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{field}", System.Uri.EscapeDataString(System.Convert.ToString(field, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{type}", System.Uri.EscapeDataString(System.Convert.ToString(type, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{prefix}", System.Uri.EscapeDataString(System.Convert.ToString(prefix, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{regex}", System.Uri.EscapeDataString(System.Convert.ToString(regex, System.Globalization.CultureInfo.InvariantCulture)));
            if (find != null) urlBuilder_.Append("find=").Append(System.Uri.EscapeDataString(System.Convert.ToString(find, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (count != null) urlBuilder_.Append("count=").Append(System.Uri.EscapeDataString(System.Convert.ToString(count.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Entry>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Entry>>(responseData_);
                                return result_;
                            }
                            catch (System.Exception exception)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_);

                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }

                            throw new SwaggerException<Error>("Unexpected error", status_, responseData_, headers_, result_, null);
                        }

                        return default(System.Collections.ObjectModel.ObservableCollection<Entry>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>View generated Mongo Query object</summary>
        /// <param name="storage">`entries`, or `treatments` to select the storage layer.</param>
        /// <param name="spec">entry id, such as `55cf81bc436037528ec75fa5` or a type filter such
        /// as `sgv`, `mbg`, etc.
        /// This parameter is optional.</param>
        /// <param name="find">The query used to find entries, support nested query syntax, for
        /// example `find[dateString][$gte]=2015-08-27`.  All find parameters
        /// are interpreted as strings.</param>
        /// <param name="count">Number of entries to return.</param>
        /// <returns>An array of entries</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> EchoAsync(string storage, string spec, string find, double? count)
        {
            return EchoAsync(storage, spec, find, count, System.Threading.CancellationToken.None);
        }

        /// <summary>View generated Mongo Query object</summary>
        /// <param name="storage">`entries`, or `treatments` to select the storage layer.</param>
        /// <param name="spec">entry id, such as `55cf81bc436037528ec75fa5` or a type filter such
        /// as `sgv`, `mbg`, etc.
        /// This parameter is optional.</param>
        /// <param name="find">The query used to find entries, support nested query syntax, for
        /// example `find[dateString][$gte]=2015-08-27`.  All find parameters
        /// are interpreted as strings.</param>
        /// <param name="count">Number of entries to return.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>An array of entries</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> EchoAsync(string storage, string spec, string find, double? count, System.Threading.CancellationToken cancellationToken)
        {
            if (storage == null)
                throw new System.ArgumentNullException("storage");

            if (spec == null)
                throw new System.ArgumentNullException("spec");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/echo/{storage}/{spec}?");
            urlBuilder_.Replace("{storage}", System.Uri.EscapeDataString(System.Convert.ToString(storage, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{spec}", System.Uri.EscapeDataString(System.Convert.ToString(spec, System.Globalization.CultureInfo.InvariantCulture)));
            if (find != null) urlBuilder_.Append("find=").Append(System.Uri.EscapeDataString(System.Convert.ToString(find, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (count != null) urlBuilder_.Append("count=").Append(System.Uri.EscapeDataString(System.Convert.ToString(count.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(object);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_);
                                return result_;
                            }
                            catch (System.Exception exception)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Echo the query object to be used.</summary>
        /// <param name="prefix">Prefix to use in constructing a prefix-based regex.</param>
        /// <param name="regex">Tail part of regexp to use in expanding/construccting a query object.
        /// Regexp also has bash-style brace and glob expansion applied to it,
        /// creating ways to search for modal times of day, perhaps using
        /// something like this syntax: `T{15..17}:.*`, this would search for
        /// all records from 3pm to 5pm.</param>
        /// <param name="find">The query used to find entries, support nested query syntax, for example `find[dateString][$gte]=2015-08-27`.  All find parameters are interpreted as strings.</param>
        /// <param name="count">Number of entries to return.</param>
        /// <returns>An array of entries</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> Echo2Async(string prefix, string regex, string find, double? count)
        {
            return Echo2Async(prefix, regex, find, count, System.Threading.CancellationToken.None);
        }

        /// <summary>Echo the query object to be used.</summary>
        /// <param name="prefix">Prefix to use in constructing a prefix-based regex.</param>
        /// <param name="regex">Tail part of regexp to use in expanding/construccting a query object.
        /// Regexp also has bash-style brace and glob expansion applied to it,
        /// creating ways to search for modal times of day, perhaps using
        /// something like this syntax: `T{15..17}:.*`, this would search for
        /// all records from 3pm to 5pm.</param>
        /// <param name="find">The query used to find entries, support nested query syntax, for example `find[dateString][$gte]=2015-08-27`.  All find parameters are interpreted as strings.</param>
        /// <param name="count">Number of entries to return.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>An array of entries</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> Echo2Async(string prefix, string regex, string find, double? count, System.Threading.CancellationToken cancellationToken)
        {
            if (prefix == null)
                throw new System.ArgumentNullException("prefix");

            if (regex == null)
                throw new System.ArgumentNullException("regex");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/times/echo/{prefix}/{regex}?");
            urlBuilder_.Replace("{prefix}", System.Uri.EscapeDataString(System.Convert.ToString(prefix, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{regex}", System.Uri.EscapeDataString(System.Convert.ToString(regex, System.Globalization.CultureInfo.InvariantCulture)));
            if (find != null) urlBuilder_.Append("find=").Append(System.Uri.EscapeDataString(System.Convert.ToString(find, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (count != null) urlBuilder_.Append("count=").Append(System.Uri.EscapeDataString(System.Convert.ToString(count.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(object);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_);
                                return result_;
                            }
                            catch (System.Exception exception)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_);

                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }

                            throw new SwaggerException<Error>("Unexpected error", status_, responseData_, headers_, result_, null);
                        }

                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>All Entries matching query</summary>
        /// <param name="prefix">Prefix to use in constructing a prefix-based regex.</param>
        /// <param name="regex">Tail part of regexp to use in expanding/construccting a query object.
        /// Regexp also has bash-style brace and glob expansion applied to it,
        /// creating ways to search for modal times of day, perhaps using
        /// something like this syntax: `T{15..17}:.*`, this would search for
        /// all records from 3pm to 5pm.</param>
        /// <param name="find">The query used to find entries, support nested query syntax, for example `find[dateString][$gte]=2015-08-27`.  All find parameters are interpreted as strings.</param>
        /// <param name="count">Number of entries to return.</param>
        /// <returns>An array of entries</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Entry>> TimesAsync(string prefix, string regex, string find, double? count)
        {
            return TimesAsync(prefix, regex, find, count, System.Threading.CancellationToken.None);
        }

        /// <summary>All Entries matching query</summary>
        /// <param name="prefix">Prefix to use in constructing a prefix-based regex.</param>
        /// <param name="regex">Tail part of regexp to use in expanding/construccting a query object.
        /// Regexp also has bash-style brace and glob expansion applied to it,
        /// creating ways to search for modal times of day, perhaps using
        /// something like this syntax: `T{15..17}:.*`, this would search for
        /// all records from 3pm to 5pm.</param>
        /// <param name="find">The query used to find entries, support nested query syntax, for example `find[dateString][$gte]=2015-08-27`.  All find parameters are interpreted as strings.</param>
        /// <param name="count">Number of entries to return.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>An array of entries</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Entry>> TimesAsync(string prefix, string regex, string find, double? count, System.Threading.CancellationToken cancellationToken)
        {
            if (prefix == null)
                throw new System.ArgumentNullException("prefix");

            if (regex == null)
                throw new System.ArgumentNullException("regex");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/times/{prefix}/{regex}?");
            urlBuilder_.Replace("{prefix}", System.Uri.EscapeDataString(System.Convert.ToString(prefix, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{regex}", System.Uri.EscapeDataString(System.Convert.ToString(regex, System.Globalization.CultureInfo.InvariantCulture)));
            if (find != null) urlBuilder_.Append("find=").Append(System.Uri.EscapeDataString(System.Convert.ToString(find, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (count != null) urlBuilder_.Append("count=").Append(System.Uri.EscapeDataString(System.Convert.ToString(count.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Entry>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Entry>>(responseData_);
                                return result_;
                            }
                            catch (System.Exception exception)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_);

                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }

                            throw new SwaggerException<Error>("Unexpected error", status_, responseData_, headers_, result_, null);
                        }

                        return default(System.Collections.ObjectModel.ObservableCollection<Entry>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>All Entries matching query</summary>
        /// <param name="find">The query used to find entries, support nested query syntax, for example `find[dateString][$gte]=2015-08-27`.  All find parameters are interpreted as strings.</param>
        /// <param name="count">Number of entries to return.</param>
        /// <returns>An array of entries</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Entry>> EntriesAsync(string find, double? count)
        {
            return EntriesAsync(find, count, System.Threading.CancellationToken.None);
        }

        /// <summary>All Entries matching query</summary>
        /// <param name="find">The query used to find entries, support nested query syntax, for example `find[dateString][$gte]=2015-08-27`.  All find parameters are interpreted as strings.</param>
        /// <param name="count">Number of entries to return.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>An array of entries</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Entry>> EntriesAsync(string find, double? count, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/entries?");
            //manuel edit
            //if (find != null) urlBuilder_.Append("find=").Append(System.Uri.EscapeDataString(System.Convert.ToString(find, System.Globalization.CultureInfo.InvariantCulture))).Append("&");

            if (find != null) urlBuilder_.Append(find).Append("&");
            if (count != null) urlBuilder_.Append("count=").Append(System.Uri.EscapeDataString(System.Convert.ToString(count.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Entry>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Entry>>(responseData_);
                                return result_;
                            }
                            catch (System.Exception exception)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_);

                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }

                            throw new SwaggerException<Error>("Unexpected error", status_, responseData_, headers_, result_, null);
                        }

                        return default(System.Collections.ObjectModel.ObservableCollection<Entry>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Add new entries.</summary>
        /// <param name="body">Entries to be uploaded.</param>
        /// <returns>Rejected list of entries.  Empty list is success.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task AddEntriesAsync(System.Collections.Generic.IEnumerable<Entry> body)
        {
            return AddEntriesAsync(body, System.Threading.CancellationToken.None);
        }

        /// <summary>Add new entries.</summary>
        /// <param name="body">Entries to be uploaded.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Rejected list of entries.  Empty list is success.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task AddEntriesAsync(System.Collections.Generic.IEnumerable<Entry> body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/entries");

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            return;
                        }
                        else
                        if (status_ == "405")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid input", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Delete entries matching query.</summary>
        /// <param name="find">The query used to find entries, support nested query syntax, for example `find[dateString][$gte]=2015-08-27`.  All find parameters are interpreted as strings.</param>
        /// <param name="count">Number of entries to return.</param>
        /// <returns>Empty list is success.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task RemoveAsync(string find, double? count)
        {
            return RemoveAsync(find, count, System.Threading.CancellationToken.None);
        }

        /// <summary>Delete entries matching query.</summary>
        /// <param name="find">The query used to find entries, support nested query syntax, for example `find[dateString][$gte]=2015-08-27`.  All find parameters are interpreted as strings.</param>
        /// <param name="count">Number of entries to return.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Empty list is success.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task RemoveAsync(string find, double? count, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/entries?");
            if (find != null) urlBuilder_.Append("find=").Append(System.Uri.EscapeDataString(System.Convert.ToString(find, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (count != null) urlBuilder_.Append("count=").Append(System.Uri.EscapeDataString(System.Convert.ToString(count.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Treatments</summary>
        /// <param name="find">The query used to find entries, supports nested query syntax.  Examples `find[insulin][$gte]=3` `find[carb][$gte]=100` `find[eventType]=Correction+Bolus` All find parameters are interpreted as strings.</param>
        /// <param name="count">Number of entries to return.</param>
        /// <returns>An array of treatments</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Treatment>> TreatmentsAsync(string find, double? count)
        {
            return TreatmentsAsync(find, count, System.Threading.CancellationToken.None);
        }

        /// <summary>Treatments</summary>
        /// <param name="find">The query used to find entries, supports nested query syntax.  Examples `find[insulin][$gte]=3` `find[carb][$gte]=100` `find[eventType]=Correction+Bolus` All find parameters are interpreted as strings.</param>
        /// <param name="count">Number of entries to return.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>An array of treatments</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Treatment>> TreatmentsAsync(string find, double? count, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/treatments?");
            //manuel edit
            //if (find != null) urlBuilder_.Append("find=").Append(System.Uri.EscapeDataString(System.Convert.ToString(find, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (find != null) urlBuilder_.Append(find).Append("&");
            if (count != null) urlBuilder_.Append("count=").Append(System.Uri.EscapeDataString(System.Convert.ToString(count.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Treatment>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Treatment>>(responseData_);
                                return result_;
                            }
                            catch (System.Exception exception)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_);

                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }

                            throw new SwaggerException<Error>("Unexpected error", status_, responseData_, headers_, result_, null);
                        }

                        return default(System.Collections.ObjectModel.ObservableCollection<Treatment>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Add new treatments.</summary>
        /// <param name="body">Treatments to be uploaded.</param>
        /// <returns>Rejected list of treatments.  Empty list is success.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task AddTreatmentsAsync(System.Collections.Generic.IEnumerable<Treatment> body)
        {
            return AddTreatmentsAsync(body, System.Threading.CancellationToken.None);
        }

        /// <summary>Add new treatments.</summary>
        /// <param name="body">Treatments to be uploaded.</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Rejected list of treatments.  Empty list is success.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task AddTreatmentsAsync(System.Collections.Generic.IEnumerable<Treatment> body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/treatments");

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body));
                    content_.Headers.ContentType.MediaType = "application/json";
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            return;
                        }
                        else
                        if (status_ == "405")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Invalid input", status_, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Profile</summary>
        /// <returns>An array of treatments</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Profile> ProfileAsync()
        {
            return ProfileAsync(System.Threading.CancellationToken.None);
        }

        /// <summary>Profile</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>An array of treatments</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Profile> ProfileAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/profile");

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Profile);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Profile>(responseData_);
                                return result_;
                            }
                            catch (System.Exception exception)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_);

                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }

                            throw new SwaggerException<Error>("Unexpected error", status_, responseData_, headers_, result_, null);
                        }

                        return default(Profile);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Status</summary>
        /// <returns>Server capabilities and status.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Status> StatusAsync()
        {
            return StatusAsync(System.Threading.CancellationToken.None);
        }

        /// <summary>Status</summary>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Server capabilities and status.</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Status> StatusAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl).Append("/status");

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Status);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Status>(responseData_);
                                return result_;
                            }
                            catch (System.Exception exception)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
                            }
                        }
                        else
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Error);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(responseData_);

                            }
                            catch (System.Exception exception_)
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }

                            throw new SwaggerException<Error>("Unexpected error", status_, responseData_, headers_, result_, null);
                        }

                        return default(Status);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

    }



    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class Entry : System.ComponentModel.INotifyPropertyChanged
    {
        private string _type;
        private string _dateString;
        private double? _date;
        private double? _sgv;
        private string _direction;
        private double? _noise;
        private double? _filtered;
        private double? _unfiltered;
        private double? _rssi;

        /// <summary>sgv, mbg, cal, etc</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        ////[BsonElement("type")]
        public string Type
        {
            get { return _type; }
            set
            {
                if (_type != value)
                {
                    _type = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>dateString, prefer ISO `8601`</summary>
        [Newtonsoft.Json.JsonProperty("dateString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
       // //[BsonElement("dateString")]
        public string DateString
        {
            get { return _dateString; }
            set
            {
                if (_dateString != value)
                {
                    _dateString = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Epoch</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
       // //[BsonElement("date")]
        public double? Date
        {
            get { return _date; }
            set
            {
                if (_date != value)
                {
                    _date = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The glucose reading. (only available for sgv types)</summary>
        [Newtonsoft.Json.JsonProperty("sgv", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
      //  //[BsonElement("sgv")]
        public double? Sgv
        {
            get { return _sgv; }
            set
            {
                if (_sgv != value)
                {
                    _sgv = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Direction of glucose trend reported by CGM. (only available for sgv types)</summary>
        [Newtonsoft.Json.JsonProperty("direction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
     //   //[BsonElement("direction")]
        public string Direction
        {
            get { return _direction; }
            set
            {
                if (_direction != value)
                {
                    _direction = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Noise level at time of reading. (only available for sgv types)</summary>
        [Newtonsoft.Json.JsonProperty("noise", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
       // //[BsonElement("noise")]
        public double? Noise
        {
            get { return _noise; }
            set
            {
                if (_noise != value)
                {
                    _noise = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The raw filtered value directly from CGM transmitter. (only available for sgv types)</summary>
        [Newtonsoft.Json.JsonProperty("filtered", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
      //  //[BsonElement("filtered")]
        public double? Filtered
        {
            get { return _filtered; }
            set
            {
                if (_filtered != value)
                {
                    _filtered = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The raw unfiltered value directly from CGM transmitter. (only available for sgv types)</summary>
        [Newtonsoft.Json.JsonProperty("unfiltered", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
      //  //[BsonElement("unfiltered")]
        public double? Unfiltered
        {
            get { return _unfiltered; }
            set
            {
                if (_unfiltered != value)
                {
                    _unfiltered = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The signal strength from CGM transmitter. (only available for sgv types)</summary>
        [Newtonsoft.Json.JsonProperty("rssi", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
       // //[BsonElement("rssi")]
        public double? Rssi
        {
            get { return _rssi; }
            set
            {
                if (_rssi != value)
                {
                    _rssi = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Entry FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Entry>(data);
        }

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class Treatment : System.ComponentModel.INotifyPropertyChanged
    {
        //private string __id;
        private string _eventType;
        private string _created_at;
        private string _glucose;
        private string _glucoseType;
        private double? _carbs;
        private double? _insulin;
        private string _units;
        private string _notes;
        private string _enteredBy;

        ///// <summary>Internally assigned id.</summary>
        //[Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        //public string _id
        //{
        //    get { return __id; }
        //    set
        //    {
        //        if (__id != value)
        //        {
        //            __id = value;
        //            RaisePropertyChanged();
        //        }
        //    }
        //}

        /// <summary>The type of treatment event.</summary>
       // //[BsonElement("eventType"), BsonIgnoreIfNull]
        [Newtonsoft.Json.JsonProperty("eventType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EventType
        {
            get { return _eventType; }
            set
            {
                if (_eventType != value)
                {
                    _eventType = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The date of the event, might be set retroactively .</summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
      //  //[BsonElement("created_at"), BsonIgnoreIfNull]
        public string Created_at
        {
            get { return _created_at; }
            set
            {
                if (_created_at != value)
                {
                    _created_at = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Current glucose.</summary>
        [Newtonsoft.Json.JsonProperty("glucose", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
       /// //[BsonElement("glucose"), BsonIgnoreIfNull]
        public string Glucose
        {
            get { return _glucose; }
            set
            {
                if (_glucose != value)
                {
                    _glucose = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Method used to obtain glucose, Finger or Sensor.</summary>
        [Newtonsoft.Json.JsonProperty("glucoseType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
      //  //[BsonElement("glucoseType"), BsonIgnoreIfNull]
        public string GlucoseType
        {
            get { return _glucoseType; }
            set
            {
                if (_glucoseType != value)
                {
                    _glucoseType = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Number of carbs.</summary>
        [Newtonsoft.Json.JsonProperty("carbs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
      //  //[BsonElement("carbs"), BsonIgnoreIfNull]
        public double? Carbs
        {
            get { return _carbs; }
            set
            {
                if (_carbs != value)
                {
                    _carbs = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Amount of insulin, if any.</summary>
        [Newtonsoft.Json.JsonProperty("insulin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
       // //[BsonElement("insulin"), BsonIgnoreIfNull]
        public double? Insulin
        {
            get { return _insulin; }
            set
            {
                if (_insulin != value)
                {
                    _insulin = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The units for the glucose value, mg/dl or mmol.</summary>
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
      //  //[BsonElement("units"), BsonIgnoreIfNull]
        public string Units
        {
            get { return _units; }
            set
            {
                if (_units != value)
                {
                    _units = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Description/notes of treatment.</summary>
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
     //   //[BsonElement("notes"), BsonIgnoreIfNull]
        public string Notes
        {
            get { return _notes; }
            set
            {
                if (_notes != value)
                {
                    _notes = value;
                    RaisePropertyChanged();
                }
            }
        }

        // "isAnnouncement": true
        private bool _isAnnouncement;
      //  //[BsonElement("isAnnouncement"), BsonIgnoreIfNull]
        public bool IsAnnouncement
        {
            get { return _isAnnouncement; }
            set { _isAnnouncement = value;

                RaisePropertyChanged();
            }
        }

        /// <summary>Who entered the treatment.</summary>
        [Newtonsoft.Json.JsonProperty("enteredBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
      //  //[BsonElement("enteredBy"), BsonIgnoreIfNull]
        public string EnteredBy
        {
            get { return _enteredBy; }
            set
            {
                if (_enteredBy != value)
                {
                    _enteredBy = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Treatment FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Treatment>(data);
        }

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class Profile : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _sens;
        private int? _dia;
        private int? _carbratio;
        private int? _carbs_hr;
        private string __id;

        /// <summary>Internally assigned id</summary>
        [Newtonsoft.Json.JsonProperty("sens", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Sens
        {
            get { return _sens; }
            set
            {
                if (_sens != value)
                {
                    _sens = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Internally assigned id</summary>
        [Newtonsoft.Json.JsonProperty("dia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Dia
        {
            get { return _dia; }
            set
            {
                if (_dia != value)
                {
                    _dia = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Internally assigned id</summary>
        [Newtonsoft.Json.JsonProperty("carbratio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Carbratio
        {
            get { return _carbratio; }
            set
            {
                if (_carbratio != value)
                {
                    _carbratio = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Internally assigned id</summary>
        [Newtonsoft.Json.JsonProperty("carbs_hr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Carbs_hr
        {
            get { return _carbs_hr; }
            set
            {
                if (_carbs_hr != value)
                {
                    _carbs_hr = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Internally assigned id</summary>
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _id
        {
            get { return __id; }
            set
            {
                if (__id != value)
                {
                    __id = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Profile FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Profile>(data);
        }

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class Status : System.ComponentModel.INotifyPropertyChanged
    {
        private bool? _apiEnabled;
        private bool? _careportalEnabled;
        private string _head;
        private string _name;
        private string _version;
        private Settings _settings;
        private object _extendedSettings;

        /// <summary>Whether or not the REST API is enabled.</summary>
        [Newtonsoft.Json.JsonProperty("apiEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ApiEnabled
        {
            get { return _apiEnabled; }
            set
            {
                if (_apiEnabled != value)
                {
                    _apiEnabled = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Whether or not the careportal is enabled in the API.</summary>
        [Newtonsoft.Json.JsonProperty("careportalEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CareportalEnabled
        {
            get { return _careportalEnabled; }
            set
            {
                if (_careportalEnabled != value)
                {
                    _careportalEnabled = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The git identifier for the running instance of the app.</summary>
        [Newtonsoft.Json.JsonProperty("head", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Head
        {
            get { return _head; }
            set
            {
                if (_head != value)
                {
                    _head = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Nightscout (static)</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The version label of the app.</summary>
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version
        {
            get { return _version; }
            set
            {
                if (_version != value)
                {
                    _version = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Settings Settings
        {
            get { return _settings; }
            set
            {
                if (_settings != value)
                {
                    _settings = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("extendedSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ExtendedSettings
        {
            get { return _extendedSettings; }
            set
            {
                if (_extendedSettings != value)
                {
                    _extendedSettings = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Status FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Status>(data);
        }

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class Settings : System.ComponentModel.INotifyPropertyChanged
    {
        private string _units;
        private SettingsTimeFormat? _timeFormat;
        private string _customTitle;
        private bool? _nightMode;
        private string _theme;
        private string _language;
        private string _showPlugins;
        private string _showRawbg;
        private System.Collections.ObjectModel.ObservableCollection<string> _alarmTypes;
        private bool? _alarmUrgentHigh;
        private bool? _alarmHigh;
        private bool? _alarmLow;
        private bool? _alarmUrgentLow;
        private bool? _alarmTimeagoWarn;
        private double? _alarmTimeagoWarnMins;
        private bool? _alarmTimeagoUrgent;
        private double? _alarmTimeagoUrgentMins;
        private System.Collections.ObjectModel.ObservableCollection<string> _enable;
        private Threshold _thresholds;

        /// <summary>Default units for glucose measurements across the server.</summary>
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Units
        {
            get { return _units; }
            set
            {
                if (_units != value)
                {
                    _units = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Default time format</summary>
        [Newtonsoft.Json.JsonProperty("timeFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SettingsTimeFormat? TimeFormat
        {
            get { return _timeFormat; }
            set
            {
                if (_timeFormat != value)
                {
                    _timeFormat = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Default custom title to be displayed system wide.</summary>
        [Newtonsoft.Json.JsonProperty("customTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomTitle
        {
            get { return _customTitle; }
            set
            {
                if (_customTitle != value)
                {
                    _customTitle = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Should Night mode be enabled by default?</summary>
        [Newtonsoft.Json.JsonProperty("nightMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NightMode
        {
            get { return _nightMode; }
            set
            {
                if (_nightMode != value)
                {
                    _nightMode = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Default theme to be displayed system wide, `default`, `colors`, `colorblindfriendly`.</summary>
        [Newtonsoft.Json.JsonProperty("theme", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Theme
        {
            get { return _theme; }
            set
            {
                if (_theme != value)
                {
                    _theme = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Default language code to be used system wide</summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language
        {
            get { return _language; }
            set
            {
                if (_language != value)
                {
                    _language = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Plugins that should be shown by default</summary>
        [Newtonsoft.Json.JsonProperty("showPlugins", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShowPlugins
        {
            get { return _showPlugins; }
            set
            {
                if (_showPlugins != value)
                {
                    _showPlugins = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>If Raw BG is enabled when should it be shown? `never`, `always`, `noise`</summary>
        [Newtonsoft.Json.JsonProperty("showRawbg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShowRawbg
        {
            get { return _showRawbg; }
            set
            {
                if (_showRawbg != value)
                {
                    _showRawbg = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Enabled alarm types, can be multiple</summary>
        [Newtonsoft.Json.JsonProperty("alarmTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> AlarmTypes
        {
            get { return _alarmTypes; }
            set
            {
                if (_alarmTypes != value)
                {
                    _alarmTypes = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Enable/Disable client-side Urgent High alarms by default, for use with `simple` alarms.</summary>
        [Newtonsoft.Json.JsonProperty("alarmUrgentHigh", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AlarmUrgentHigh
        {
            get { return _alarmUrgentHigh; }
            set
            {
                if (_alarmUrgentHigh != value)
                {
                    _alarmUrgentHigh = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Enable/Disable client-side High alarms by default, for use with `simple` alarms.</summary>
        [Newtonsoft.Json.JsonProperty("alarmHigh", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AlarmHigh
        {
            get { return _alarmHigh; }
            set
            {
                if (_alarmHigh != value)
                {
                    _alarmHigh = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Enable/Disable client-side Low alarms by default, for use with `simple` alarms.</summary>
        [Newtonsoft.Json.JsonProperty("alarmLow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AlarmLow
        {
            get { return _alarmLow; }
            set
            {
                if (_alarmLow != value)
                {
                    _alarmLow = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Enable/Disable client-side Urgent Low alarms by default, for use with `simple` alarms.</summary>
        [Newtonsoft.Json.JsonProperty("alarmUrgentLow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AlarmUrgentLow
        {
            get { return _alarmUrgentLow; }
            set
            {
                if (_alarmUrgentLow != value)
                {
                    _alarmUrgentLow = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Enable/Disable client-side stale data alarms by default.</summary>
        [Newtonsoft.Json.JsonProperty("alarmTimeagoWarn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AlarmTimeagoWarn
        {
            get { return _alarmTimeagoWarn; }
            set
            {
                if (_alarmTimeagoWarn != value)
                {
                    _alarmTimeagoWarn = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Number of minutes before a stale data warning is generated.</summary>
        [Newtonsoft.Json.JsonProperty("alarmTimeagoWarnMins", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AlarmTimeagoWarnMins
        {
            get { return _alarmTimeagoWarnMins; }
            set
            {
                if (_alarmTimeagoWarnMins != value)
                {
                    _alarmTimeagoWarnMins = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Enable/Disable client-side urgent stale data alarms by default.</summary>
        [Newtonsoft.Json.JsonProperty("alarmTimeagoUrgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AlarmTimeagoUrgent
        {
            get { return _alarmTimeagoUrgent; }
            set
            {
                if (_alarmTimeagoUrgent != value)
                {
                    _alarmTimeagoUrgent = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Number of minutes before a stale data warning is generated.</summary>
        [Newtonsoft.Json.JsonProperty("alarmTimeagoUrgentMins", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AlarmTimeagoUrgentMins
        {
            get { return _alarmTimeagoUrgentMins; }
            set
            {
                if (_alarmTimeagoUrgentMins != value)
                {
                    _alarmTimeagoUrgentMins = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Enabled features</summary>
        [Newtonsoft.Json.JsonProperty("enable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Enable
        {
            get { return _enable; }
            set
            {
                if (_enable != value)
                {
                    _enable = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("thresholds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Threshold Thresholds
        {
            get { return _thresholds; }
            set
            {
                if (_thresholds != value)
                {
                    _thresholds = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Settings FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Settings>(data);
        }

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class Threshold : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _bg_high;
        private int? _bg_target_top;
        private int? _bg_target_bottom;
        private int? _bg_low;

        /// <summary>High BG range.</summary>
        [Newtonsoft.Json.JsonProperty("bg_high", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Bg_high
        {
            get { return _bg_high; }
            set
            {
                if (_bg_high != value)
                {
                    _bg_high = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Top of target range.</summary>
        [Newtonsoft.Json.JsonProperty("bg_target_top", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Bg_target_top
        {
            get { return _bg_target_top; }
            set
            {
                if (_bg_target_top != value)
                {
                    _bg_target_top = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Bottom of target range.</summary>
        [Newtonsoft.Json.JsonProperty("bg_target_bottom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Bg_target_bottom
        {
            get { return _bg_target_bottom; }
            set
            {
                if (_bg_target_bottom != value)
                {
                    _bg_target_bottom = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Low BG range.</summary>
        [Newtonsoft.Json.JsonProperty("bg_low", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Bg_low
        {
            get { return _bg_low; }
            set
            {
                if (_bg_low != value)
                {
                    _bg_low = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Threshold FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Threshold>(data);
        }

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public partial class Error : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _code;
        private string _message;
        private object _fields;

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Code
        {
            get { return _code; }
            set
            {
                if (_code != value)
                {
                    _code = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message
        {
            get { return _message; }
            set
            {
                if (_message != value)
                {
                    _message = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Fields
        {
            get { return _fields; }
            set
            {
                if (_fields != value)
                {
                    _fields = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Error FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(data);
        }

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.2.4.0")]
    public enum SettingsTimeFormat
    {
        [System.Runtime.Serialization.EnumMember(Value = "12")]
        _12 = 0,

        [System.Runtime.Serialization.EnumMember(Value = "24")]
        _24 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.2.0.0")]
    public class SwaggerException : System.Exception
    {
        public string StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public SwaggerException(string message, string statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message, innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.2.0.0")]
    public class SwaggerException<TResult> : SwaggerException
    {
        public TResult Result { get; private set; }

        public SwaggerException(string message, string statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}