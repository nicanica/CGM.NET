// <auto-generated />
using System;
using CGM.Data.Minimed;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CGM.Data.Minimed.Migrations.SqlServerMigrations
{
    [DbContext(typeof(SqlDbContext))]
    partial class SqlDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CGM.Data.Minimed.Model.BayerStick", b =>
                {
                    b.Property<int>("BayerStickId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessPassword");

                    b.Property<string>("AllBytesAsString");

                    b.Property<string>("AnalogEngineVersion");

                    b.Property<string>("DigitalEngineVersion");

                    b.Property<string>("GameBoardVersion");

                    b.Property<string>("HMACbyte");

                    b.Property<string>("Manufacturer");

                    b.Property<string>("MeterLanguage");

                    b.Property<string>("ModelNumber");

                    b.Property<string>("Name");

                    b.Property<string>("RFID");

                    b.Property<string>("SerialNum");

                    b.Property<string>("SerialNumSmall");

                    b.Property<string>("SerialNumber");

                    b.Property<string>("SerialNumberFull");

                    b.Property<string>("SkuIdentifier");

                    b.Property<string>("TestReminderInterval");

                    b.Property<string>("Value");

                    b.HasKey("BayerStickId");

                    b.ToTable("BayerStick");
                });

            modelBuilder.Entity("CGM.Data.Minimed.Model.Calibration", b =>
                {
                    b.Property<int>("CalibrationID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CalibrationFactor");

                    b.Property<int>("PumpEventId");

                    b.HasKey("CalibrationID");

                    b.HasIndex("PumpEventId");

                    b.ToTable("Calibration");
                });

            modelBuilder.Entity("CGM.Data.Minimed.Model.DailyTotal", b =>
                {
                    b.Property<int>("DailyTotalId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("BASAL_PERCENT");

                    b.Property<byte>("BOLUS_PERCENT");

                    b.Property<byte>("BOLUS_WIZARD_CORRECTION_ONLY_BOLUS_COUNT");

                    b.Property<byte>("BOLUS_WIZARD_FOOD_AND_CORRECTION_BOLUS_COUNT");

                    b.Property<byte>("BOLUS_WIZARD_FOOD_ONLY_BOLUS_COUNT");

                    b.Property<byte>("BOLUS_WIZARD_USAGE_COUNT");

                    b.Property<byte>("CARB_UNITS");

                    b.Property<short>("Duration");

                    b.Property<short>("FALLING_RATE_ALERTS");

                    b.Property<short>("HIGH_BG_ALERTS");

                    b.Property<short>("HIGH_PREDICTIVE_ALERTS");

                    b.Property<short>("LGS_SUSPENSION_DURATION");

                    b.Property<short>("LOW_BG_ALERTS");

                    b.Property<short>("LOW_GLUCOSE_SUSPEND_ALERTS");

                    b.Property<short>("LOW_PREDICTIVE_ALERTS");

                    b.Property<byte>("MANUALLY_ENTERED_BG_COUNT");

                    b.Property<byte>("MANUAL_BOLUS_COUNT");

                    b.Property<byte>("METER_BG_COUNT");

                    b.Property<byte>("PERCENT_ABOVE_HIGH");

                    b.Property<byte>("PERCENT_BELOW_LOW");

                    b.Property<byte>("PERCENT_WITHIN_LIMIT");

                    b.Property<short>("PREDICTIVE_LOW_GLUCOSE_SUSPEND_ALERTS");

                    b.Property<int>("PumpEventId");

                    b.Property<short>("RISING_RATE_ALERTS");

                    b.Property<short>("SG_COUNT");

                    b.Property<short>("SG_DURATION_ABOVE_HIGH");

                    b.Property<short>("SG_DURATION_BELOW_LOW");

                    b.Property<short>("SG_DURATION_WITHIN_LIMIT");

                    b.Property<short>("TOTAL_FOOD_INPUT");

                    b.HasKey("DailyTotalId");

                    b.HasIndex("PumpEventId");

                    b.ToTable("DailyTotal");
                });

            modelBuilder.Entity("CGM.Data.Minimed.Model.DataLogger", b =>
                {
                    b.Property<int>("DataLoggerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DataLoggerKey");

                    b.Property<string>("DataLoggerName");

                    b.HasKey("DataLoggerId");

                    b.ToTable("DataLogger");
                });

            modelBuilder.Entity("CGM.Data.Minimed.Model.DataLoggerReading", b =>
                {
                    b.Property<int>("DataLoggerReadingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BayerStickId");

                    b.Property<int>("DataLoggerId");

                    b.Property<DateTime?>("NextReadingDateTime");

                    b.Property<DateTime>("ReadingDateTime");

                    b.HasKey("DataLoggerReadingId");

                    b.HasIndex("BayerStickId");

                    b.HasIndex("DataLoggerId");

                    b.ToTable("DataLoggerReading");
                });

            modelBuilder.Entity("CGM.Data.Minimed.Model.EventType", b =>
                {
                    b.Property<int>("EventTypeId");

                    b.Property<string>("EventTypeFullName");

                    b.Property<string>("EventTypeName");

                    b.HasKey("EventTypeId");

                    b.ToTable("EventType");
                });

            modelBuilder.Entity("CGM.Data.Minimed.Model.Pump", b =>
                {
                    b.Property<int>("PumpId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("BgUnitRaw");

                    b.Property<string>("BytesAsString");

                    b.Property<string>("Firmware");

                    b.Property<string>("FirmwareAlphaNumber");

                    b.Property<byte>("FirmwareMajorNumber");

                    b.Property<byte>("FirmwareMinorNumber");

                    b.Property<string>("Mac");

                    b.Property<string>("Motor");

                    b.Property<string>("MotorAlphaNumber");

                    b.Property<byte>("MotorMajorNumber");

                    b.Property<byte>("MotorMinorNumber");

                    b.Property<string>("SerialNumber");

                    b.HasKey("PumpId");

                    b.ToTable("Pump");
                });

            modelBuilder.Entity("CGM.Data.Minimed.Model.PumpEvent", b =>
                {
                    b.Property<int>("PumpEventId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BytesAsString");

                    b.Property<int>("DataLoggerReadingId");

                    b.Property<int>("EventTypeId");

                    b.Property<byte>("Length");

                    b.Property<int>("PumpEventAlertId");

                    b.Property<int>("PumpId");

                    b.Property<byte>("Source");

                    b.Property<string>("Title");

                    b.HasKey("PumpEventId");

                    b.HasIndex("DataLoggerReadingId");

                    b.HasIndex("EventTypeId");

                    b.HasIndex("PumpEventAlertId");

                    b.HasIndex("PumpId");

                    b.ToTable("PumpEvent");
                });

            modelBuilder.Entity("CGM.Data.Minimed.Model.PumpEventAlert", b =>
                {
                    b.Property<int>("PumpEventAlertId");

                    b.Property<string>("PumpEventAlertFullName");

                    b.Property<string>("PumpEventAlertName");

                    b.HasKey("PumpEventAlertId");

                    b.ToTable("PumpEventAlert");
                });

            modelBuilder.Entity("CGM.Data.Minimed.Model.PumpStatus", b =>
                {
                    b.Property<int>("PumpStatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("ActiveBasalPattern");

                    b.Property<double>("ActiveInsulin");

                    b.Property<int>("ActiveInsulinRaw");

                    b.Property<short>("Alert");

                    b.Property<string>("AlertName");

                    b.Property<double>("BasalUnitsDeliveredToday");

                    b.Property<int>("BasalUnitsDeliveredTodayRaw");

                    b.Property<byte>("BatteryPercentage");

                    b.Property<double>("BolusEstimate");

                    b.Property<int>("BolusWizardBGL");

                    b.Property<short>("BolusWizardBGLRaw");

                    b.Property<byte>("BolusWizardRecent");

                    b.Property<string>("BytesAsString");

                    b.Property<byte>("CgmTrend");

                    b.Property<byte>("InsulinHours");

                    b.Property<byte>("InsulinMinutes");

                    b.Property<int>("LastBolusAmount");

                    b.Property<DateTime?>("LastBolusDateTime");

                    b.Property<short>("LastBolusReference");

                    b.Property<int>("LastBolusTime");

                    b.Property<byte>("LowSuspendActive");

                    b.Property<double>("NormalBasal");

                    b.Property<int>("NormalBasalRaw");

                    b.Property<int>("NowBolusingAmountDelivered");

                    b.Property<short>("NowBolusingMinutesRemaining");

                    b.Property<short>("NowBolusingReference");

                    b.Property<bool>("PS_BolusingDual");

                    b.Property<bool>("PS_BolusingNormal");

                    b.Property<bool>("PS_BolusingSquare");

                    b.Property<bool>("PS_CgmActive");

                    b.Property<bool>("PS_DeliveringInsulin");

                    b.Property<bool>("PS_Suspended");

                    b.Property<bool>("PS_TempBasalActive");

                    b.Property<int>("PumpId");

                    b.Property<DateTime>("PumpStatusDateTime");

                    b.Property<double>("ReservoirAmount");

                    b.Property<int>("ReservoirAmountRaw");

                    b.Property<bool>("SS_Calibrating");

                    b.Property<bool>("SS_CalibrationComplete");

                    b.Property<bool>("SS_Exception");

                    b.Property<int>("SensorBattery");

                    b.Property<byte>("SensorBatteryRaw");

                    b.Property<DateTime?>("SensorCalibrationDateTime");

                    b.Property<short>("SensorCalibrationMinutesRemaining");

                    b.Property<short>("SensorRateOfChangeRaw");

                    b.Property<byte>("SensorStatusFlag");

                    b.Property<int>("Sgv");

                    b.Property<double>("SgvMmol");

                    b.Property<short>("SgvRaw");

                    b.Property<byte>("StatusFlag");

                    b.Property<int>("TempBasal");

                    b.Property<short>("TempBasalMinutesRemaining");

                    b.Property<byte>("TempBasalPercentage");

                    b.Property<int>("Unknown1");

                    b.Property<byte>("Unknown3");

                    b.Property<byte[]>("Unknown6");

                    b.HasKey("PumpStatusId");

                    b.HasIndex("PumpId");

                    b.ToTable("PumpStatus");
                });

            modelBuilder.Entity("CGM.Data.Minimed.Model.SensorEvent", b =>
                {
                    b.Property<int>("SensorEventId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BytesAsString");

                    b.Property<int>("DataLoggerReadingId");

                    b.Property<int>("EventTypeId");

                    b.Property<byte>("Length");

                    b.Property<int>("PumpId");

                    b.Property<byte>("Source");

                    b.Property<string>("Title");

                    b.HasKey("SensorEventId");

                    b.HasIndex("DataLoggerReadingId");

                    b.HasIndex("EventTypeId");

                    b.HasIndex("PumpId");

                    b.ToTable("SensorEvent");
                });

            modelBuilder.Entity("CGM.Data.Minimed.Model.SensorReading", b =>
                {
                    b.Property<int>("SensorReadingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Amount");

                    b.Property<short>("IsigRaw");

                    b.Property<int?>("PredictedSg");

                    b.Property<int?>("PredictedSg_Alert");

                    b.Property<short>("RateOfChangeRaw");

                    b.Property<DateTime>("ReadingDateTime");

                    b.Property<int>("SensorEventId");

                    b.Property<int>("SensorReadingAlertId");

                    b.Property<byte>("SensorStatus");

                    b.Property<byte>("SgvRaw1");

                    b.Property<byte>("SgvRaw2");

                    b.HasKey("SensorReadingId");

                    b.HasIndex("SensorEventId");

                    b.HasIndex("SensorReadingAlertId");

                    b.ToTable("SensorReading");
                });

            modelBuilder.Entity("CGM.Data.Minimed.Model.SensorReadingAlert", b =>
                {
                    b.Property<int>("SensorReadingAlertId");

                    b.Property<string>("SensorReadingAlertFullName");

                    b.Property<string>("SensorReadingAlertName");

                    b.HasKey("SensorReadingAlertId");

                    b.ToTable("SensorReadingAlert");
                });

            modelBuilder.Entity("CGM.Data.Minimed.Model.Calibration", b =>
                {
                    b.HasOne("CGM.Data.Minimed.Model.PumpEvent", "PumpEvent")
                        .WithMany("Calibrations")
                        .HasForeignKey("PumpEventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("CGM.Data.Minimed.Model.Owned.BgDataType", "BG", b1 =>
                        {
                            b1.Property<int>("CalibrationID")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<double>("BG");

                            b1.Property<short>("BG_RAW");

                            b1.ToTable("Calibration");

                            b1.HasOne("CGM.Data.Minimed.Model.Calibration")
                                .WithOne("BG")
                                .HasForeignKey("CGM.Data.Minimed.Model.Owned.BgDataType", "CalibrationID")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("CGM.Data.Minimed.Model.DailyTotal", b =>
                {
                    b.HasOne("CGM.Data.Minimed.Model.PumpEvent", "PumpEvent")
                        .WithMany("DailyTotals")
                        .HasForeignKey("PumpEventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("CGM.Data.Minimed.Model.Owned.BgDataType", "BG_AVERAGE", b1 =>
                        {
                            b1.Property<int?>("DailyTotalId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<double>("BG");

                            b1.Property<short>("BG_RAW");

                            b1.ToTable("DailyTotal");

                            b1.HasOne("CGM.Data.Minimed.Model.DailyTotal")
                                .WithOne("BG_AVERAGE")
                                .HasForeignKey("CGM.Data.Minimed.Model.Owned.BgDataType", "DailyTotalId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("CGM.Data.Minimed.Model.Owned.BgDataType", "HIGH_MANUALLY_ENTERED_BG", b1 =>
                        {
                            b1.Property<int?>("DailyTotalId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<double>("BG");

                            b1.Property<short>("BG_RAW");

                            b1.ToTable("DailyTotal");

                            b1.HasOne("CGM.Data.Minimed.Model.DailyTotal")
                                .WithOne("HIGH_MANUALLY_ENTERED_BG")
                                .HasForeignKey("CGM.Data.Minimed.Model.Owned.BgDataType", "DailyTotalId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("CGM.Data.Minimed.Model.Owned.BgDataType", "HIGH_METER_BG", b1 =>
                        {
                            b1.Property<int?>("DailyTotalId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<double>("BG");

                            b1.Property<short>("BG_RAW");

                            b1.ToTable("DailyTotal");

                            b1.HasOne("CGM.Data.Minimed.Model.DailyTotal")
                                .WithOne("HIGH_METER_BG")
                                .HasForeignKey("CGM.Data.Minimed.Model.Owned.BgDataType", "DailyTotalId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("CGM.Data.Minimed.Model.Owned.BgDataType", "LOW_MANUALLY_ENTERED_BG", b1 =>
                        {
                            b1.Property<int?>("DailyTotalId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<double>("BG");

                            b1.Property<short>("BG_RAW");

                            b1.ToTable("DailyTotal");

                            b1.HasOne("CGM.Data.Minimed.Model.DailyTotal")
                                .WithOne("LOW_MANUALLY_ENTERED_BG")
                                .HasForeignKey("CGM.Data.Minimed.Model.Owned.BgDataType", "DailyTotalId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("CGM.Data.Minimed.Model.Owned.BgDataType", "LOW_METER_BG", b1 =>
                        {
                            b1.Property<int>("DailyTotalId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<double>("BG");

                            b1.Property<short>("BG_RAW");

                            b1.ToTable("DailyTotal");

                            b1.HasOne("CGM.Data.Minimed.Model.DailyTotal")
                                .WithOne("LOW_METER_BG")
                                .HasForeignKey("CGM.Data.Minimed.Model.Owned.BgDataType", "DailyTotalId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("CGM.Data.Minimed.Model.Owned.BgDataType", "MANUALLY_ENTERED_BG_AVERAGE", b1 =>
                        {
                            b1.Property<int?>("DailyTotalId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<double>("BG");

                            b1.Property<short>("BG_RAW");

                            b1.ToTable("DailyTotal");

                            b1.HasOne("CGM.Data.Minimed.Model.DailyTotal")
                                .WithOne("MANUALLY_ENTERED_BG_AVERAGE")
                                .HasForeignKey("CGM.Data.Minimed.Model.Owned.BgDataType", "DailyTotalId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("CGM.Data.Minimed.Model.Owned.BgDataType", "METER_BG_AVERAGE", b1 =>
                        {
                            b1.Property<int>("DailyTotalId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<double>("BG");

                            b1.Property<short>("BG_RAW");

                            b1.ToTable("DailyTotal");

                            b1.HasOne("CGM.Data.Minimed.Model.DailyTotal")
                                .WithOne("METER_BG_AVERAGE")
                                .HasForeignKey("CGM.Data.Minimed.Model.Owned.BgDataType", "DailyTotalId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("CGM.Data.Minimed.Model.Owned.DateTimeDataType", "Date", b1 =>
                        {
                            b1.Property<int?>("DailyTotalId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<DateTime>("Date");

                            b1.Property<double>("DateTimeEpoch");

                            b1.Property<int>("Offset");

                            b1.Property<int>("Rtc");

                            b1.ToTable("DailyTotal");

                            b1.HasOne("CGM.Data.Minimed.Model.DailyTotal")
                                .WithOne("Date")
                                .HasForeignKey("CGM.Data.Minimed.Model.Owned.DateTimeDataType", "DailyTotalId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("CGM.Data.Minimed.Model.Owned.InsulinDataType", "BASAL_INSULIN", b1 =>
                        {
                            b1.Property<int>("DailyTotalId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<double>("Insulin");

                            b1.Property<int>("InsulinRaw");

                            b1.ToTable("DailyTotal");

                            b1.HasOne("CGM.Data.Minimed.Model.DailyTotal")
                                .WithOne("BASAL_INSULIN")
                                .HasForeignKey("CGM.Data.Minimed.Model.Owned.InsulinDataType", "DailyTotalId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("CGM.Data.Minimed.Model.Owned.InsulinDataType", "BOLUS_INSULIN", b1 =>
                        {
                            b1.Property<int?>("DailyTotalId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<double>("Insulin");

                            b1.Property<int>("InsulinRaw");

                            b1.ToTable("DailyTotal");

                            b1.HasOne("CGM.Data.Minimed.Model.DailyTotal")
                                .WithOne("BOLUS_INSULIN")
                                .HasForeignKey("CGM.Data.Minimed.Model.Owned.InsulinDataType", "DailyTotalId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("CGM.Data.Minimed.Model.Owned.InsulinDataType", "TOTAL_BOLUS_WIZARD_INSULIN_AS_CORRECTION_ONLY_BOLUS", b1 =>
                        {
                            b1.Property<int?>("DailyTotalId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<double>("Insulin");

                            b1.Property<int>("InsulinRaw");

                            b1.ToTable("DailyTotal");

                            b1.HasOne("CGM.Data.Minimed.Model.DailyTotal")
                                .WithOne("TOTAL_BOLUS_WIZARD_INSULIN_AS_CORRECTION_ONLY_BOLUS")
                                .HasForeignKey("CGM.Data.Minimed.Model.Owned.InsulinDataType", "DailyTotalId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("CGM.Data.Minimed.Model.Owned.InsulinDataType", "TOTAL_BOLUS_WIZARD_INSULIN_AS_FOOD_AND_CORRECTION", b1 =>
                        {
                            b1.Property<int?>("DailyTotalId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<double>("Insulin");

                            b1.Property<int>("InsulinRaw");

                            b1.ToTable("DailyTotal");

                            b1.HasOne("CGM.Data.Minimed.Model.DailyTotal")
                                .WithOne("TOTAL_BOLUS_WIZARD_INSULIN_AS_FOOD_AND_CORRECTION")
                                .HasForeignKey("CGM.Data.Minimed.Model.Owned.InsulinDataType", "DailyTotalId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("CGM.Data.Minimed.Model.Owned.InsulinDataType", "TOTAL_BOLUS_WIZARD_INSULIN_AS_FOOD_ONLY_BOLUS", b1 =>
                        {
                            b1.Property<int?>("DailyTotalId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<double>("Insulin");

                            b1.Property<int>("InsulinRaw");

                            b1.ToTable("DailyTotal");

                            b1.HasOne("CGM.Data.Minimed.Model.DailyTotal")
                                .WithOne("TOTAL_BOLUS_WIZARD_INSULIN_AS_FOOD_ONLY_BOLUS")
                                .HasForeignKey("CGM.Data.Minimed.Model.Owned.InsulinDataType", "DailyTotalId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("CGM.Data.Minimed.Model.Owned.InsulinDataType", "TOTAL_INSULIN", b1 =>
                        {
                            b1.Property<int>("DailyTotalId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<double>("Insulin");

                            b1.Property<int>("InsulinRaw");

                            b1.ToTable("DailyTotal");

                            b1.HasOne("CGM.Data.Minimed.Model.DailyTotal")
                                .WithOne("TOTAL_INSULIN")
                                .HasForeignKey("CGM.Data.Minimed.Model.Owned.InsulinDataType", "DailyTotalId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("CGM.Data.Minimed.Model.Owned.InsulinDataType", "TOTAL_MANUAL_BOLUS_INSULIN", b1 =>
                        {
                            b1.Property<int?>("DailyTotalId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<double>("Insulin");

                            b1.Property<int>("InsulinRaw");

                            b1.ToTable("DailyTotal");

                            b1.HasOne("CGM.Data.Minimed.Model.DailyTotal")
                                .WithOne("TOTAL_MANUAL_BOLUS_INSULIN")
                                .HasForeignKey("CGM.Data.Minimed.Model.Owned.InsulinDataType", "DailyTotalId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("CGM.Data.Minimed.Model.Owned.SgDataType", "SG_AVERAGE", b1 =>
                        {
                            b1.Property<int>("DailyTotalId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<double>("SG");

                            b1.Property<short>("SG_RAW");

                            b1.ToTable("DailyTotal");

                            b1.HasOne("CGM.Data.Minimed.Model.DailyTotal")
                                .WithOne("SG_AVERAGE")
                                .HasForeignKey("CGM.Data.Minimed.Model.Owned.SgDataType", "DailyTotalId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("CGM.Data.Minimed.Model.Owned.SgDataType", "SG_STDDEV", b1 =>
                        {
                            b1.Property<int>("DailyTotalId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<double>("SG");

                            b1.Property<short>("SG_RAW");

                            b1.ToTable("DailyTotal");

                            b1.HasOne("CGM.Data.Minimed.Model.DailyTotal")
                                .WithOne("SG_STDDEV")
                                .HasForeignKey("CGM.Data.Minimed.Model.Owned.SgDataType", "DailyTotalId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("CGM.Data.Minimed.Model.DataLoggerReading", b =>
                {
                    b.HasOne("CGM.Data.Minimed.Model.BayerStick", "BayerStick")
                        .WithMany("DataLoggerReadings")
                        .HasForeignKey("BayerStickId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CGM.Data.Minimed.Model.DataLogger", "DataLogger")
                        .WithMany("DataLoggerReadings")
                        .HasForeignKey("DataLoggerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CGM.Data.Minimed.Model.PumpEvent", b =>
                {
                    b.HasOne("CGM.Data.Minimed.Model.DataLoggerReading", "DataLoggerReading")
                        .WithMany("PumpEvents")
                        .HasForeignKey("DataLoggerReadingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CGM.Data.Minimed.Model.EventType", "EventType")
                        .WithMany("PumpEvents")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CGM.Data.Minimed.Model.PumpEventAlert", "PumpEventAlert")
                        .WithMany("PumpEvents")
                        .HasForeignKey("PumpEventAlertId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CGM.Data.Minimed.Model.Pump", "Pump")
                        .WithMany("PumpEvents")
                        .HasForeignKey("PumpId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("CGM.Data.Minimed.Model.Owned.DateTimeDataType", "EventDate", b1 =>
                        {
                            b1.Property<int>("PumpEventId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<DateTime>("Date");

                            b1.Property<double>("DateTimeEpoch");

                            b1.Property<int>("Offset");

                            b1.Property<int>("Rtc");

                            b1.ToTable("PumpEvent");

                            b1.HasOne("CGM.Data.Minimed.Model.PumpEvent")
                                .WithOne("EventDate")
                                .HasForeignKey("CGM.Data.Minimed.Model.Owned.DateTimeDataType", "PumpEventId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("CGM.Data.Minimed.Model.PumpStatus", b =>
                {
                    b.HasOne("CGM.Data.Minimed.Model.Pump", "Pump")
                        .WithMany("PumpStatus")
                        .HasForeignKey("PumpId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("CGM.Data.Minimed.Model.Owned.DateTimeDataType", "AlertDateTime", b1 =>
                        {
                            b1.Property<int>("PumpStatusId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<DateTime>("Date");

                            b1.Property<double>("DateTimeEpoch");

                            b1.Property<int>("Offset");

                            b1.Property<int>("Rtc");

                            b1.ToTable("PumpStatus");

                            b1.HasOne("CGM.Data.Minimed.Model.PumpStatus")
                                .WithOne("AlertDateTime")
                                .HasForeignKey("CGM.Data.Minimed.Model.Owned.DateTimeDataType", "PumpStatusId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("CGM.Data.Minimed.Model.Owned.DateTimeDataType", "SgvDateTime", b1 =>
                        {
                            b1.Property<int>("PumpStatusId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<DateTime>("Date");

                            b1.Property<double>("DateTimeEpoch");

                            b1.Property<int>("Offset");

                            b1.Property<int>("Rtc");

                            b1.ToTable("PumpStatus");

                            b1.HasOne("CGM.Data.Minimed.Model.PumpStatus")
                                .WithOne("SgvDateTime")
                                .HasForeignKey("CGM.Data.Minimed.Model.Owned.DateTimeDataType", "PumpStatusId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("CGM.Data.Minimed.Model.SensorEvent", b =>
                {
                    b.HasOne("CGM.Data.Minimed.Model.DataLoggerReading", "DataLoggerReading")
                        .WithMany()
                        .HasForeignKey("DataLoggerReadingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CGM.Data.Minimed.Model.EventType", "EventType")
                        .WithMany("SensorEvents")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CGM.Data.Minimed.Model.Pump", "Pump")
                        .WithMany("SensorEvents")
                        .HasForeignKey("PumpId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("CGM.Data.Minimed.Model.Owned.DateTimeDataType", "EventDate", b1 =>
                        {
                            b1.Property<int>("SensorEventId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<DateTime>("Date");

                            b1.Property<double>("DateTimeEpoch");

                            b1.Property<int>("Offset");

                            b1.Property<int>("Rtc");

                            b1.ToTable("SensorEvent");

                            b1.HasOne("CGM.Data.Minimed.Model.SensorEvent")
                                .WithOne("EventDate")
                                .HasForeignKey("CGM.Data.Minimed.Model.Owned.DateTimeDataType", "SensorEventId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("CGM.Data.Minimed.Model.SensorReading", b =>
                {
                    b.HasOne("CGM.Data.Minimed.Model.SensorEvent", "SensorEvent")
                        .WithMany("SensorReadings")
                        .HasForeignKey("SensorEventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CGM.Data.Minimed.Model.SensorReadingAlert", "SensorReadingAlert")
                        .WithMany("SensorReadings")
                        .HasForeignKey("SensorReadingAlertId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
